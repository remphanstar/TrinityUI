Project Trinity: AI Handover & Briefing Document
Objective: This document provides a concise, high-level overview of Project Trinity. It is designed to be the primary entry point for any new AI session to quickly understand the project's purpose, architecture, and key components.
1. High-Level Project Overview
* Project Name: Project Trinity
* Core Purpose: A robust framework for simplifying the setup, configuration, and launch of various Stable Diffusion WebUIs (e.g., A1111, ComfyUI) on cloud platforms.
* Origin: The project is an advanced, heavily refactored fork of the anxety-solo/sdAIgen repository. It was created to overcome architectural limitations discovered during a previous refactor attempt known as "AnxLight."
2. Current Architecture: The 3-Cell Trinity Paradigm
The current architecture is a strict three-cell notebook design. This separation of concerns is the most critical concept to understand as it dictates the entire workflow and was implemented to ensure stability and testability.
* Cell 1: Infrastructure & Validation
   * What it does: Performs all heavy, one-time setup tasks. It installs system packages, creates a Python virtual environment (VENV), and installs all supported WebUIs.
   * Key Feature: It concludes with a comprehensive validation suite to test that the environment is sound before the user proceeds.
   * Purpose: To create a stable, validated base layer and prevent downstream errors.
* Cell 2: Configuration Hub
   * What it does: Launches a persistent, interactive Gradio UI. The user makes all their selections here (WebUI, models, assets, tokens, etc.).
   * Key Output: The only output of this cell is the trinity_config.json file, which saves the user's complete configuration.
   * Purpose: To act as a pure, decoupled state generator. It does not perform any execution tasks itself.
* Cell 3: Execution Engine
   * What it does: This cell is an automated executor. It reads the trinity_config.json file created by Cell 2, downloads the specified assets, and then launches the chosen WebUI.
   * Purpose: To act as a simple, predictable "dumb" executor that acts only on the state file, making the final launch process isolated and easy to debug.
3. The "Living" Handover Document (Project_Context.md)
For session-to-session continuity, a separate, "living" document named Project_Context.md is maintained.
* Purpose: This file is the project's short-term memory. It contains the most up-to-date information on current status, recent changes, and immediate next steps.
* Workflow: This should be the first file you read to understand the immediate context and the last file you update before ending a session.
4. How the Original sdAIgen Project Worked
Understanding the original anxety-solo/sdAIgen architecture is crucial for context, as Trinity inherits many of its concepts.
* Interface: It used a single, monolithic Jupyter Notebook (ANXETY_sdAIgen_EN.ipynb) with IPython widgets for all user configuration.
* Operational Flow: The process was linear and orchestrated by scripts executed from the notebook:
   1. scripts/setup.py would run first, reading the widget values and saving them to a state file called settings.json.
   2. scripts/launch.py would then run. It would read settings.json, download all assets, set up tunneling, and launch the WebUI.
* Key Takeaway: The original was a tightly coupled, linear system. Trinity's 3-cell model was specifically designed to decouple these steps for greater stability and robustness.
5. Further Reading & Expanded Context
This document is intentionally brief. For more detailed information, please refer to the other project documents:
* For a complete and exhaustive history of the project, including the challenging "AnxLight" phase, refer to the "Project Trinity: A Comprehensive Technical History & File Architecture" document.
* For a specific breakdown of all current files, their purposes, and their relationships, refer to the ProjectTrinityUI.pdf document.
If these documents are not immediately available, please ask the user to provide them for the deepest possible context.